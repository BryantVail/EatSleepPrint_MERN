"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var contentNode = document.getElementById("contents");

var OrderRow = function (_React$Component) {
    _inherits(OrderRow, _React$Component);

    function OrderRow() {
        _classCallCheck(this, OrderRow);

        return _possibleConstructorReturn(this, (OrderRow.__proto__ || Object.getPrototypeOf(OrderRow)).apply(this, arguments));
    }

    _createClass(OrderRow, [{
        key: "render",
        value: function render() {
            var borderedStyle = { border: "1px solid silver", padding: 4 };
            return React.createElement(
                "tr",
                null,
                React.createElement(
                    "td",
                    { style: borderedStyle },
                    this.props.orderId
                ),
                React.createElement(
                    "td",
                    { style: borderedStyle },
                    this.props.orderTitle
                )
            );
        }
    }]);

    return OrderRow;
}(React.Component);

var OrderTable = function (_React$Component2) {
    _inherits(OrderTable, _React$Component2);

    function OrderTable() {
        _classCallCheck(this, OrderTable);

        return _possibleConstructorReturn(this, (OrderTable.__proto__ || Object.getPrototypeOf(OrderTable)).apply(this, arguments));
    }

    _createClass(OrderTable, [{
        key: "render",
        value: function render() {
            var borderedStyle = { border: "1px solid silver", padding: 6 };
            return React.createElement(
                "table",
                { style: { borderCollapse: "collapse" } },
                React.createElement(
                    "thead",
                    null,
                    React.createElement(
                        "tr",
                        null,
                        React.createElement(
                            "th",
                            { style: borderedStyle },
                            "Id"
                        ),
                        React.createElement(
                            "th",
                            { style: borderedStyle },
                            "Title"
                        )
                    )
                ),
                React.createElement(
                    "tbody",
                    null,
                    React.createElement(OrderRow, { orderId: 1,
                        orderTitle: "Spiderman" }),
                    React.createElement(OrderRow, { orderId: 2,
                        orderTitle: "Tree Cutters" })
                )
            );
        }
    }]);

    return OrderTable;
}(React.Component);

ReactDOM.render(React.createElement(OrderTable, null), contentNode);